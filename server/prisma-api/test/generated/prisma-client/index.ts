// Code generated by Prisma (prisma@1.28.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  kitchen: (where?: KitchenWhereInput) => Promise<boolean>;
  recipe: (where?: RecipeWhereInput) => Promise<boolean>;
  recipeStep: (where?: RecipeStepWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  kitchen: (where: KitchenWhereUniqueInput) => KitchenPromise;
  kitchens: (
    args?: {
      where?: KitchenWhereInput;
      orderBy?: KitchenOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Kitchen>;
  kitchensConnection: (
    args?: {
      where?: KitchenWhereInput;
      orderBy?: KitchenOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => KitchenConnectionPromise;
  recipe: (where: RecipeWhereUniqueInput) => RecipePromise;
  recipes: (
    args?: {
      where?: RecipeWhereInput;
      orderBy?: RecipeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Recipe>;
  recipesConnection: (
    args?: {
      where?: RecipeWhereInput;
      orderBy?: RecipeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => RecipeConnectionPromise;
  recipeStep: (where: RecipeStepWhereUniqueInput) => RecipeStepPromise;
  recipeSteps: (
    args?: {
      where?: RecipeStepWhereInput;
      orderBy?: RecipeStepOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<RecipeStep>;
  recipeStepsConnection: (
    args?: {
      where?: RecipeStepWhereInput;
      orderBy?: RecipeStepOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => RecipeStepConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createKitchen: (data: KitchenCreateInput) => KitchenPromise;
  updateKitchen: (
    args: { data: KitchenUpdateInput; where: KitchenWhereUniqueInput }
  ) => KitchenPromise;
  updateManyKitchens: (
    args: { data: KitchenUpdateManyMutationInput; where?: KitchenWhereInput }
  ) => BatchPayloadPromise;
  upsertKitchen: (
    args: {
      where: KitchenWhereUniqueInput;
      create: KitchenCreateInput;
      update: KitchenUpdateInput;
    }
  ) => KitchenPromise;
  deleteKitchen: (where: KitchenWhereUniqueInput) => KitchenPromise;
  deleteManyKitchens: (where?: KitchenWhereInput) => BatchPayloadPromise;
  createRecipe: (data: RecipeCreateInput) => RecipePromise;
  updateRecipe: (
    args: { data: RecipeUpdateInput; where: RecipeWhereUniqueInput }
  ) => RecipePromise;
  updateManyRecipes: (
    args: { data: RecipeUpdateManyMutationInput; where?: RecipeWhereInput }
  ) => BatchPayloadPromise;
  upsertRecipe: (
    args: {
      where: RecipeWhereUniqueInput;
      create: RecipeCreateInput;
      update: RecipeUpdateInput;
    }
  ) => RecipePromise;
  deleteRecipe: (where: RecipeWhereUniqueInput) => RecipePromise;
  deleteManyRecipes: (where?: RecipeWhereInput) => BatchPayloadPromise;
  createRecipeStep: (data: RecipeStepCreateInput) => RecipeStepPromise;
  updateRecipeStep: (
    args: { data: RecipeStepUpdateInput; where: RecipeStepWhereUniqueInput }
  ) => RecipeStepPromise;
  updateManyRecipeSteps: (
    args: {
      data: RecipeStepUpdateManyMutationInput;
      where?: RecipeStepWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertRecipeStep: (
    args: {
      where: RecipeStepWhereUniqueInput;
      create: RecipeStepCreateInput;
      update: RecipeStepUpdateInput;
    }
  ) => RecipeStepPromise;
  deleteRecipeStep: (where: RecipeStepWhereUniqueInput) => RecipeStepPromise;
  deleteManyRecipeSteps: (where?: RecipeStepWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  kitchen: (
    where?: KitchenSubscriptionWhereInput
  ) => KitchenSubscriptionPayloadSubscription;
  recipe: (
    where?: RecipeSubscriptionWhereInput
  ) => RecipeSubscriptionPayloadSubscription;
  recipeStep: (
    where?: RecipeStepSubscriptionWhereInput
  ) => RecipeStepSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type KitchenOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type RecipeStepOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "idx_ASC"
  | "idx_DESC"
  | "description_ASC"
  | "description_DESC"
  | "duration_ASC"
  | "duration_DESC"
  | "isAttended_ASC"
  | "isAttended_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type RecipeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "maxServingWaitTime_ASC"
  | "maxServingWaitTime_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "encryptedPassword_ASC"
  | "encryptedPassword_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface RecipeStepUpdateWithoutRecipeDataInput {
  idx?: Int;
  description?: String;
  duration?: Int;
  isAttended?: Boolean;
}

export type KitchenWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface KitchenUpdateManyMutationInput {
  name?: String;
}

export interface RecipeCreateOneWithoutStepsInput {
  create?: RecipeCreateWithoutStepsInput;
  connect?: RecipeWhereUniqueInput;
}

export interface RecipeUpdateWithoutStepsDataInput {
  name?: String;
  description?: String;
  maxServingWaitTime?: Int;
  author?: UserUpdateOneRequiredWithoutRecipesInput;
}

export interface RecipeStepUpdateManyWithWhereNestedInput {
  where: RecipeStepScalarWhereInput;
  data: RecipeStepUpdateManyDataInput;
}

export interface RecipeUpdateOneRequiredWithoutStepsInput {
  create?: RecipeCreateWithoutStepsInput;
  update?: RecipeUpdateWithoutStepsDataInput;
  upsert?: RecipeUpsertWithoutStepsInput;
  connect?: RecipeWhereUniqueInput;
}

export interface RecipeStepSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: RecipeStepWhereInput;
  AND?: RecipeStepSubscriptionWhereInput[] | RecipeStepSubscriptionWhereInput;
  OR?: RecipeStepSubscriptionWhereInput[] | RecipeStepSubscriptionWhereInput;
  NOT?: RecipeStepSubscriptionWhereInput[] | RecipeStepSubscriptionWhereInput;
}

export interface RecipeCreateInput {
  name: String;
  description: String;
  maxServingWaitTime?: Int;
  steps?: RecipeStepCreateManyWithoutRecipeInput;
  author: UserCreateOneWithoutRecipesInput;
}

export interface KitchenSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: KitchenWhereInput;
  AND?: KitchenSubscriptionWhereInput[] | KitchenSubscriptionWhereInput;
  OR?: KitchenSubscriptionWhereInput[] | KitchenSubscriptionWhereInput;
  NOT?: KitchenSubscriptionWhereInput[] | KitchenSubscriptionWhereInput;
}

export interface RecipeStepCreateManyWithoutRecipeInput {
  create?:
    | RecipeStepCreateWithoutRecipeInput[]
    | RecipeStepCreateWithoutRecipeInput;
  connect?: RecipeStepWhereUniqueInput[] | RecipeStepWhereUniqueInput;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  encryptedPassword?: String;
}

export interface RecipeStepCreateWithoutRecipeInput {
  idx: Int;
  description: String;
  duration: Int;
  isAttended: Boolean;
}

export interface RecipeWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  maxServingWaitTime?: Int;
  maxServingWaitTime_not?: Int;
  maxServingWaitTime_in?: Int[] | Int;
  maxServingWaitTime_not_in?: Int[] | Int;
  maxServingWaitTime_lt?: Int;
  maxServingWaitTime_lte?: Int;
  maxServingWaitTime_gt?: Int;
  maxServingWaitTime_gte?: Int;
  steps_every?: RecipeStepWhereInput;
  steps_some?: RecipeStepWhereInput;
  steps_none?: RecipeStepWhereInput;
  author?: UserWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: RecipeWhereInput[] | RecipeWhereInput;
  OR?: RecipeWhereInput[] | RecipeWhereInput;
  NOT?: RecipeWhereInput[] | RecipeWhereInput;
}

export interface UserCreateOneWithoutRecipesInput {
  create?: UserCreateWithoutRecipesInput;
  connect?: UserWhereUniqueInput;
}

export interface KitchenWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: KitchenWhereInput[] | KitchenWhereInput;
  OR?: KitchenWhereInput[] | KitchenWhereInput;
  NOT?: KitchenWhereInput[] | KitchenWhereInput;
}

export interface UserCreateWithoutRecipesInput {
  email: String;
  encryptedPassword: String;
  kitchens?: KitchenCreateManyInput;
}

export interface RecipeUpdateManyWithWhereNestedInput {
  where: RecipeScalarWhereInput;
  data: RecipeUpdateManyDataInput;
}

export interface KitchenCreateManyInput {
  create?: KitchenCreateInput[] | KitchenCreateInput;
  connect?: KitchenWhereUniqueInput[] | KitchenWhereUniqueInput;
}

export interface RecipeUpsertWithWhereUniqueWithoutAuthorInput {
  where: RecipeWhereUniqueInput;
  update: RecipeUpdateWithoutAuthorDataInput;
  create: RecipeCreateWithoutAuthorInput;
}

export interface RecipeUpdateInput {
  name?: String;
  description?: String;
  maxServingWaitTime?: Int;
  steps?: RecipeStepUpdateManyWithoutRecipeInput;
  author?: UserUpdateOneRequiredWithoutRecipesInput;
}

export interface RecipeUpdateWithWhereUniqueWithoutAuthorInput {
  where: RecipeWhereUniqueInput;
  data: RecipeUpdateWithoutAuthorDataInput;
}

export interface RecipeStepUpdateManyWithoutRecipeInput {
  create?:
    | RecipeStepCreateWithoutRecipeInput[]
    | RecipeStepCreateWithoutRecipeInput;
  delete?: RecipeStepWhereUniqueInput[] | RecipeStepWhereUniqueInput;
  connect?: RecipeStepWhereUniqueInput[] | RecipeStepWhereUniqueInput;
  set?: RecipeStepWhereUniqueInput[] | RecipeStepWhereUniqueInput;
  disconnect?: RecipeStepWhereUniqueInput[] | RecipeStepWhereUniqueInput;
  update?:
    | RecipeStepUpdateWithWhereUniqueWithoutRecipeInput[]
    | RecipeStepUpdateWithWhereUniqueWithoutRecipeInput;
  upsert?:
    | RecipeStepUpsertWithWhereUniqueWithoutRecipeInput[]
    | RecipeStepUpsertWithWhereUniqueWithoutRecipeInput;
  deleteMany?: RecipeStepScalarWhereInput[] | RecipeStepScalarWhereInput;
  updateMany?:
    | RecipeStepUpdateManyWithWhereNestedInput[]
    | RecipeStepUpdateManyWithWhereNestedInput;
}

export interface RecipeUpdateManyWithoutAuthorInput {
  create?: RecipeCreateWithoutAuthorInput[] | RecipeCreateWithoutAuthorInput;
  delete?: RecipeWhereUniqueInput[] | RecipeWhereUniqueInput;
  connect?: RecipeWhereUniqueInput[] | RecipeWhereUniqueInput;
  set?: RecipeWhereUniqueInput[] | RecipeWhereUniqueInput;
  disconnect?: RecipeWhereUniqueInput[] | RecipeWhereUniqueInput;
  update?:
    | RecipeUpdateWithWhereUniqueWithoutAuthorInput[]
    | RecipeUpdateWithWhereUniqueWithoutAuthorInput;
  upsert?:
    | RecipeUpsertWithWhereUniqueWithoutAuthorInput[]
    | RecipeUpsertWithWhereUniqueWithoutAuthorInput;
  deleteMany?: RecipeScalarWhereInput[] | RecipeScalarWhereInput;
  updateMany?:
    | RecipeUpdateManyWithWhereNestedInput[]
    | RecipeUpdateManyWithWhereNestedInput;
}

export interface RecipeStepUpdateWithWhereUniqueWithoutRecipeInput {
  where: RecipeStepWhereUniqueInput;
  data: RecipeStepUpdateWithoutRecipeDataInput;
}

export interface RecipeCreateWithoutAuthorInput {
  name: String;
  description: String;
  maxServingWaitTime?: Int;
  steps?: RecipeStepCreateManyWithoutRecipeInput;
}

export interface RecipeStepUpdateInput {
  idx?: Int;
  description?: String;
  duration?: Int;
  isAttended?: Boolean;
  recipe?: RecipeUpdateOneRequiredWithoutStepsInput;
}

export interface RecipeCreateManyWithoutAuthorInput {
  create?: RecipeCreateWithoutAuthorInput[] | RecipeCreateWithoutAuthorInput;
  connect?: RecipeWhereUniqueInput[] | RecipeWhereUniqueInput;
}

export interface RecipeStepUpsertWithWhereUniqueWithoutRecipeInput {
  where: RecipeStepWhereUniqueInput;
  update: RecipeStepUpdateWithoutRecipeDataInput;
  create: RecipeStepCreateWithoutRecipeInput;
}

export interface RecipeStepUpdateManyMutationInput {
  idx?: Int;
  description?: String;
  duration?: Int;
  isAttended?: Boolean;
}

export interface RecipeStepScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  idx?: Int;
  idx_not?: Int;
  idx_in?: Int[] | Int;
  idx_not_in?: Int[] | Int;
  idx_lt?: Int;
  idx_lte?: Int;
  idx_gt?: Int;
  idx_gte?: Int;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  duration?: Int;
  duration_not?: Int;
  duration_in?: Int[] | Int;
  duration_not_in?: Int[] | Int;
  duration_lt?: Int;
  duration_lte?: Int;
  duration_gt?: Int;
  duration_gte?: Int;
  isAttended?: Boolean;
  isAttended_not?: Boolean;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: RecipeStepScalarWhereInput[] | RecipeStepScalarWhereInput;
  OR?: RecipeStepScalarWhereInput[] | RecipeStepScalarWhereInput;
  NOT?: RecipeStepScalarWhereInput[] | RecipeStepScalarWhereInput;
}

export interface KitchenUpdateInput {
  name?: String;
}

export interface RecipeCreateWithoutStepsInput {
  name: String;
  description: String;
  maxServingWaitTime?: Int;
  author: UserCreateOneWithoutRecipesInput;
}

export interface RecipeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: RecipeWhereInput;
  AND?: RecipeSubscriptionWhereInput[] | RecipeSubscriptionWhereInput;
  OR?: RecipeSubscriptionWhereInput[] | RecipeSubscriptionWhereInput;
  NOT?: RecipeSubscriptionWhereInput[] | RecipeSubscriptionWhereInput;
}

export interface RecipeStepUpdateManyDataInput {
  idx?: Int;
  description?: String;
  duration?: Int;
  isAttended?: Boolean;
}

export interface RecipeStepWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  idx?: Int;
  idx_not?: Int;
  idx_in?: Int[] | Int;
  idx_not_in?: Int[] | Int;
  idx_lt?: Int;
  idx_lte?: Int;
  idx_gt?: Int;
  idx_gte?: Int;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  duration?: Int;
  duration_not?: Int;
  duration_in?: Int[] | Int;
  duration_not_in?: Int[] | Int;
  duration_lt?: Int;
  duration_lte?: Int;
  duration_gt?: Int;
  duration_gte?: Int;
  isAttended?: Boolean;
  isAttended_not?: Boolean;
  recipe?: RecipeWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: RecipeStepWhereInput[] | RecipeStepWhereInput;
  OR?: RecipeStepWhereInput[] | RecipeStepWhereInput;
  NOT?: RecipeStepWhereInput[] | RecipeStepWhereInput;
}

export interface UserUpdateOneRequiredWithoutRecipesInput {
  create?: UserCreateWithoutRecipesInput;
  update?: UserUpdateWithoutRecipesDataInput;
  upsert?: UserUpsertWithoutRecipesInput;
  connect?: UserWhereUniqueInput;
}

export interface RecipeUpdateManyDataInput {
  name?: String;
  description?: String;
  maxServingWaitTime?: Int;
}

export interface UserUpdateWithoutRecipesDataInput {
  email?: String;
  encryptedPassword?: String;
  kitchens?: KitchenUpdateManyInput;
}

export interface RecipeUpdateWithoutAuthorDataInput {
  name?: String;
  description?: String;
  maxServingWaitTime?: Int;
  steps?: RecipeStepUpdateManyWithoutRecipeInput;
}

export interface KitchenUpdateManyInput {
  create?: KitchenCreateInput[] | KitchenCreateInput;
  update?:
    | KitchenUpdateWithWhereUniqueNestedInput[]
    | KitchenUpdateWithWhereUniqueNestedInput;
  upsert?:
    | KitchenUpsertWithWhereUniqueNestedInput[]
    | KitchenUpsertWithWhereUniqueNestedInput;
  delete?: KitchenWhereUniqueInput[] | KitchenWhereUniqueInput;
  connect?: KitchenWhereUniqueInput[] | KitchenWhereUniqueInput;
  set?: KitchenWhereUniqueInput[] | KitchenWhereUniqueInput;
  disconnect?: KitchenWhereUniqueInput[] | KitchenWhereUniqueInput;
  deleteMany?: KitchenScalarWhereInput[] | KitchenScalarWhereInput;
  updateMany?:
    | KitchenUpdateManyWithWhereNestedInput[]
    | KitchenUpdateManyWithWhereNestedInput;
}

export interface UserUpdateInput {
  email?: String;
  encryptedPassword?: String;
  recipes?: RecipeUpdateManyWithoutAuthorInput;
  kitchens?: KitchenUpdateManyInput;
}

export interface KitchenUpdateWithWhereUniqueNestedInput {
  where: KitchenWhereUniqueInput;
  data: KitchenUpdateDataInput;
}

export interface UserCreateInput {
  email: String;
  encryptedPassword: String;
  recipes?: RecipeCreateManyWithoutAuthorInput;
  kitchens?: KitchenCreateManyInput;
}

export interface KitchenUpdateDataInput {
  name?: String;
}

export interface KitchenCreateInput {
  name: String;
}

export interface KitchenUpsertWithWhereUniqueNestedInput {
  where: KitchenWhereUniqueInput;
  update: KitchenUpdateDataInput;
  create: KitchenCreateInput;
}

export type RecipeWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface KitchenScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: KitchenScalarWhereInput[] | KitchenScalarWhereInput;
  OR?: KitchenScalarWhereInput[] | KitchenScalarWhereInput;
  NOT?: KitchenScalarWhereInput[] | KitchenScalarWhereInput;
}

export interface RecipeScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  maxServingWaitTime?: Int;
  maxServingWaitTime_not?: Int;
  maxServingWaitTime_in?: Int[] | Int;
  maxServingWaitTime_not_in?: Int[] | Int;
  maxServingWaitTime_lt?: Int;
  maxServingWaitTime_lte?: Int;
  maxServingWaitTime_gt?: Int;
  maxServingWaitTime_gte?: Int;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: RecipeScalarWhereInput[] | RecipeScalarWhereInput;
  OR?: RecipeScalarWhereInput[] | RecipeScalarWhereInput;
  NOT?: RecipeScalarWhereInput[] | RecipeScalarWhereInput;
}

export interface KitchenUpdateManyWithWhereNestedInput {
  where: KitchenScalarWhereInput;
  data: KitchenUpdateManyDataInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface RecipeStepCreateInput {
  idx: Int;
  description: String;
  duration: Int;
  isAttended: Boolean;
  recipe: RecipeCreateOneWithoutStepsInput;
}

export interface RecipeUpdateManyMutationInput {
  name?: String;
  description?: String;
  maxServingWaitTime?: Int;
}

export interface UserUpsertWithoutRecipesInput {
  update: UserUpdateWithoutRecipesDataInput;
  create: UserCreateWithoutRecipesInput;
}

export interface KitchenUpdateManyDataInput {
  name?: String;
}

export interface RecipeUpsertWithoutStepsInput {
  update: RecipeUpdateWithoutStepsDataInput;
  create: RecipeCreateWithoutStepsInput;
}

export type RecipeStepWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  encryptedPassword?: String;
  encryptedPassword_not?: String;
  encryptedPassword_in?: String[] | String;
  encryptedPassword_not_in?: String[] | String;
  encryptedPassword_lt?: String;
  encryptedPassword_lte?: String;
  encryptedPassword_gt?: String;
  encryptedPassword_gte?: String;
  encryptedPassword_contains?: String;
  encryptedPassword_not_contains?: String;
  encryptedPassword_starts_with?: String;
  encryptedPassword_not_starts_with?: String;
  encryptedPassword_ends_with?: String;
  encryptedPassword_not_ends_with?: String;
  recipes_every?: RecipeWhereInput;
  recipes_some?: RecipeWhereInput;
  recipes_none?: RecipeWhereInput;
  kitchens_every?: KitchenWhereInput;
  kitchens_some?: KitchenWhereInput;
  kitchens_none?: KitchenWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  encryptedPassword: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  encryptedPassword: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  encryptedPassword: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface User {
  id: ID_Output;
  email: String;
  encryptedPassword: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  encryptedPassword: () => Promise<String>;
  recipes: <T = FragmentableArray<Recipe>>(
    args?: {
      where?: RecipeWhereInput;
      orderBy?: RecipeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  kitchens: <T = FragmentableArray<Kitchen>>(
    args?: {
      where?: KitchenWhereInput;
      orderBy?: KitchenOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  encryptedPassword: () => Promise<AsyncIterator<String>>;
  recipes: <T = Promise<AsyncIterator<RecipeSubscription>>>(
    args?: {
      where?: RecipeWhereInput;
      orderBy?: RecipeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  kitchens: <T = Promise<AsyncIterator<KitchenSubscription>>>(
    args?: {
      where?: KitchenWhereInput;
      orderBy?: KitchenOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface KitchenConnection {
  pageInfo: PageInfo;
  edges: KitchenEdge[];
}

export interface KitchenConnectionPromise
  extends Promise<KitchenConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<KitchenEdge>>() => T;
  aggregate: <T = AggregateKitchenPromise>() => T;
}

export interface KitchenConnectionSubscription
  extends Promise<AsyncIterator<KitchenConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<KitchenEdgeSubscription>>>() => T;
  aggregate: <T = AggregateKitchenSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface RecipeStepSubscriptionPayload {
  mutation: MutationType;
  node: RecipeStep;
  updatedFields: String[];
  previousValues: RecipeStepPreviousValues;
}

export interface RecipeStepSubscriptionPayloadPromise
  extends Promise<RecipeStepSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RecipeStepPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RecipeStepPreviousValuesPromise>() => T;
}

export interface RecipeStepSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RecipeStepSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RecipeStepSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RecipeStepPreviousValuesSubscription>() => T;
}

export interface RecipeStepPreviousValues {
  id: ID_Output;
  idx: Int;
  description: String;
  duration: Int;
  isAttended: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface RecipeStepPreviousValuesPromise
  extends Promise<RecipeStepPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  idx: () => Promise<Int>;
  description: () => Promise<String>;
  duration: () => Promise<Int>;
  isAttended: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RecipeStepPreviousValuesSubscription
  extends Promise<AsyncIterator<RecipeStepPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  idx: () => Promise<AsyncIterator<Int>>;
  description: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<Int>>;
  isAttended: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RecipeStep {
  id: ID_Output;
  idx: Int;
  description: String;
  duration: Int;
  isAttended: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface RecipeStepPromise extends Promise<RecipeStep>, Fragmentable {
  id: () => Promise<ID_Output>;
  idx: () => Promise<Int>;
  description: () => Promise<String>;
  duration: () => Promise<Int>;
  isAttended: () => Promise<Boolean>;
  recipe: <T = RecipePromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RecipeStepSubscription
  extends Promise<AsyncIterator<RecipeStep>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  idx: () => Promise<AsyncIterator<Int>>;
  description: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<Int>>;
  isAttended: () => Promise<AsyncIterator<Boolean>>;
  recipe: <T = RecipeSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Recipe {
  id: ID_Output;
  name: String;
  description: String;
  maxServingWaitTime?: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface RecipePromise extends Promise<Recipe>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  maxServingWaitTime: () => Promise<Int>;
  steps: <T = FragmentableArray<RecipeStep>>(
    args?: {
      where?: RecipeStepWhereInput;
      orderBy?: RecipeStepOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  author: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RecipeSubscription
  extends Promise<AsyncIterator<Recipe>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  maxServingWaitTime: () => Promise<AsyncIterator<Int>>;
  steps: <T = Promise<AsyncIterator<RecipeStepSubscription>>>(
    args?: {
      where?: RecipeStepWhereInput;
      orderBy?: RecipeStepOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  author: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface AggregateKitchen {
  count: Int;
}

export interface AggregateKitchenPromise
  extends Promise<AggregateKitchen>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateKitchenSubscription
  extends Promise<AsyncIterator<AggregateKitchen>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RecipeStepEdge {
  node: RecipeStep;
  cursor: String;
}

export interface RecipeStepEdgePromise
  extends Promise<RecipeStepEdge>,
    Fragmentable {
  node: <T = RecipeStepPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RecipeStepEdgeSubscription
  extends Promise<AsyncIterator<RecipeStepEdge>>,
    Fragmentable {
  node: <T = RecipeStepSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Kitchen {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface KitchenPromise extends Promise<Kitchen>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface KitchenSubscription
  extends Promise<AsyncIterator<Kitchen>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateRecipe {
  count: Int;
}

export interface AggregateRecipePromise
  extends Promise<AggregateRecipe>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRecipeSubscription
  extends Promise<AsyncIterator<AggregateRecipe>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface KitchenSubscriptionPayload {
  mutation: MutationType;
  node: Kitchen;
  updatedFields: String[];
  previousValues: KitchenPreviousValues;
}

export interface KitchenSubscriptionPayloadPromise
  extends Promise<KitchenSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = KitchenPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = KitchenPreviousValuesPromise>() => T;
}

export interface KitchenSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<KitchenSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = KitchenSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = KitchenPreviousValuesSubscription>() => T;
}

export interface RecipeConnection {
  pageInfo: PageInfo;
  edges: RecipeEdge[];
}

export interface RecipeConnectionPromise
  extends Promise<RecipeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RecipeEdge>>() => T;
  aggregate: <T = AggregateRecipePromise>() => T;
}

export interface RecipeConnectionSubscription
  extends Promise<AsyncIterator<RecipeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RecipeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRecipeSubscription>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface RecipePreviousValues {
  id: ID_Output;
  name: String;
  description: String;
  maxServingWaitTime?: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface RecipePreviousValuesPromise
  extends Promise<RecipePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  maxServingWaitTime: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RecipePreviousValuesSubscription
  extends Promise<AsyncIterator<RecipePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  maxServingWaitTime: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RecipeSubscriptionPayload {
  mutation: MutationType;
  node: Recipe;
  updatedFields: String[];
  previousValues: RecipePreviousValues;
}

export interface RecipeSubscriptionPayloadPromise
  extends Promise<RecipeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RecipePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RecipePreviousValuesPromise>() => T;
}

export interface RecipeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RecipeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RecipeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RecipePreviousValuesSubscription>() => T;
}

export interface KitchenEdge {
  node: Kitchen;
  cursor: String;
}

export interface KitchenEdgePromise extends Promise<KitchenEdge>, Fragmentable {
  node: <T = KitchenPromise>() => T;
  cursor: () => Promise<String>;
}

export interface KitchenEdgeSubscription
  extends Promise<AsyncIterator<KitchenEdge>>,
    Fragmentable {
  node: <T = KitchenSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface KitchenPreviousValues {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface KitchenPreviousValuesPromise
  extends Promise<KitchenPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface KitchenPreviousValuesSubscription
  extends Promise<AsyncIterator<KitchenPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateRecipeStep {
  count: Int;
}

export interface AggregateRecipeStepPromise
  extends Promise<AggregateRecipeStep>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRecipeStepSubscription
  extends Promise<AsyncIterator<AggregateRecipeStep>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RecipeEdge {
  node: Recipe;
  cursor: String;
}

export interface RecipeEdgePromise extends Promise<RecipeEdge>, Fragmentable {
  node: <T = RecipePromise>() => T;
  cursor: () => Promise<String>;
}

export interface RecipeEdgeSubscription
  extends Promise<AsyncIterator<RecipeEdge>>,
    Fragmentable {
  node: <T = RecipeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface RecipeStepConnection {
  pageInfo: PageInfo;
  edges: RecipeStepEdge[];
}

export interface RecipeStepConnectionPromise
  extends Promise<RecipeStepConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RecipeStepEdge>>() => T;
  aggregate: <T = AggregateRecipeStepPromise>() => T;
}

export interface RecipeStepConnectionSubscription
  extends Promise<AsyncIterator<RecipeStepConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RecipeStepEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRecipeStepSubscription>() => T;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Recipe",
    embedded: false
  },
  {
    name: "RecipeStep",
    embedded: false
  },
  {
    name: "Kitchen",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `${process.env["ENDPOINT_URL"]}`
});
export const prisma = new Prisma();
