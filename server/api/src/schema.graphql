type Query {
    info: String!
    user(id: ID!): User
    recipe(id: ID!): Recipe
    users: [User!]!
    recipes: [Recipe!]!
}

type Mutation {
    login(email: String!, password: String!): User
    signup(email: String!, password: String!): User
    deleteUser(id: ID!): ID
    createRecipe(name: String!, description: String!, maxServingWaitTime: Int): Recipe!
    deleteRecipe(id: ID!): ID
    addStepToRecipe(description: String!, durationInMinutes: Int!, isAttended: Boolean!, recipeId: ID!): RecipeStep
    moveStep(stepId: ID!, recipeId: ID!, destIdx: Int!): ID
    deleteStep(stepId: ID!, recipeId: ID!): ID
}

type Recipe {
    id: ID!
    name: String!
    description: String!
    maxServingWaitTime: Int,
    steps: [RecipeStep!]!
}

type RecipeStep {
    id: ID!
    description: String!
    duration: Int! # in minutes
    isAttended: Boolean!
    recipe: Recipe!
}

type Kitchen {
    id: ID!
    name: String!
}

type User {
    id: ID!
    email: String!
    # client shouldn't have access to encrypted password
    recipes: [Recipe!]!
    kitchens: [Kitchen!]!
}